#pragma once
#include "pch.h"
#include "BmpHeader.h"
#include "ImagePiece.h"
#include <algorithm>
#include "PointF.h"

using std::numbers::pi_v;
using std::vector;
using std::array;

inline constexpr float Frac(float x) noexcept
{
	return x - int32_t(x);
}

inline array<uint8_t, 3> NearestNeighbor(
	PointF p1,
	const ImagePiece& image)
{
	float x = round(p1.x);
	float y = round(p1.y);

	return array<uint8_t, 3>
	{
		image(x, y, 0), image(x, y, 1), image(x, y, 2),
	};
}


// 0 <= x <= 1
inline constexpr float Lerp(
	float x,
	float f0,
	float f1) noexcept
{
	return (1 - x) * f0 + x * f1;
}

inline array<uint8_t, 3> BiLerp(
	PointF p1,
	const ImagePiece& image) noexcept
{
	array<uint8_t, 3> result{};
	float x = Frac(p1.x);
	float y = Frac(p1.y);

	for (size_t colorOffset = 0; colorOffset < 3; colorOffset++)
	{
		float l1 = Lerp(
			y,
			image(p1.x, p1.y, colorOffset),
			image(p1.x, ceil(p1.y), colorOffset)
		);

		float l2 = Lerp(
			y,
			image(ceil(p1.x), p1.y, colorOffset),
			image(ceil(p1.x), ceil(p1.y), colorOffset)
		);

		result[colorOffset] = (uint8_t)(
			std::clamp(
				Lerp(x, l1, l2) + 1.f,
				0.f,
				255.f)
			);
	}

	return result;
}

// 0 <= x <= 1
inline constexpr float Cubic(
	float x,
	float f0,
	float f1,
	float f2,
	float f3) noexcept
{
	return f1 + 0.5f * x * (f2 - f0 + x * (2.0f * f0 - 5.0f * f1 + 4.0f * f2 - f3 + x * (3.0f * (f1 - f2) + f3 - f0)));
}

inline array<uint8_t, 3> BiCubic(
	PointF p1,
	const ImagePiece& image) noexcept
{
	// Координаты точки p.1 в дополненном изображении
	float realX = p1.x + image.GetExtendedPxLeftCount();
	float realY = p1.y + image.GetExtendedPxUpCount();

	int xm1 = floor(realX - 1);	// x_-1
	int x0 = floor(realX);		// x_0
	int x1 = ceil(realX);		// x_1
	int x2 = ceil(realX + 1);	// x_2

	array<int, 4> yCoords{
		floor(realY - 1),	// y_-1
		floor(realY),		// y_0
		ceil(realY),		// y_1
		ceil(realY + 1)		// y_2
	};

	array<uint8_t, 3> result{};
	array<float, 4> bCoefs{};
	float fracX = Frac(p1.x);
	float fracY = Frac(p1.y);

	for (size_t colorOffset = 0; colorOffset < 3; colorOffset++)
	{
		for (size_t i = 0; i < 4; i++)
		{
			bCoefs[i] = Cubic(
				fracX,
				image(xm1, yCoords[i], colorOffset),
				image(x0, yCoords[i], colorOffset),
				image(x1, yCoords[i], colorOffset),
				image(x2, yCoords[i], colorOffset)
			);
		}

		result[colorOffset] = (uint8_t)(
			std::clamp(
				Cubic(
					fracY,
					bCoefs[0],
					bCoefs[1],
					bCoefs[2],
					bCoefs[3]
				) + 1.f,
				0.f,
				255.f)
			);
	}

	return result;
}


inline float Sinc(float x) noexcept
{
	return std::sin(x * pi_v<float>) / (x * pi_v<float>);
}

inline float LanczosKernel(float x, int a) noexcept
{
	if (abs(x) < 1e-5)
	{
		return 1.f;
	}

	if (x >= -a && x <= a)
	{
		return Sinc(x) * Sinc(x / a);
	}

	return 0.f;
}

// Таблицы функции LanczosKernel
// Для a = 2 с шагом 0.01 на отрезке [-2; 2]
const array<float, 401> Lanczos2Weights
{
	-7.7437166e-16f, -2.5246432e-05f, -0.00010194601f, -0.00023147542f, -0.00041512377f, -0.000654088f, -0.00094946363f, -0.0013022594f, -0.0017133662f, -0.0021835696f, -0.0027135408f, -0.0033038363f, -0.00395489f, -0.0046670125f, -0.005440386f, -0.006275061f, -0.0071709547f, -0.008127847f, -0.009145361f, -0.0102230245f, -0.011360176f, -0.012556018f, -0.013809608f, -0.015119853f, -0.016485497f, -0.01790515f, -0.019377243f, -0.020900074f, -0.022471769f, -0.024090277f, -0.02575347f, -0.027458975f, -0.029204305f, -0.030986808f, -0.032803666f, -0.034651935f, -0.03652849f, -0.038430072f, -0.040353272f, -0.042294532f, -0.044250105f, -0.046216227f, -0.04818887f, -0.050163925f, -0.052137136f, -0.05410414f, -0.05606042f, -0.05800135f, -0.059922226f, -0.06181818f, -0.06368427f, -0.065515436f, -0.06730652f, -0.06905234f, -0.07074755f, -0.072386764f, -0.0739645f, -0.07547527f, -0.07691345f, -0.078273445f, -0.07954956f, -0.080736086f, -0.08182729f, -0.08281738f, -0.08370066f, -0.08447129f, -0.085123524f, -0.08565158f, -0.086049736f, -0.086312264f, -0.08643349f, -0.08640778f, -0.08622954f, -0.085893266f, -0.085393496f, -0.08472486f, -0.08388207f, -0.08285994f, -0.08165337f, -0.08025741f, -0.07866717f, -0.07687795f, -0.07488515f, -0.07268435f, -0.07027123f, -0.06764167f, -0.064791724f, -0.0617176f, -0.058415707f, -0.054882664f, -0.051115207f, -0.04711038f, -0.042865384f, -0.03837765f, -0.033644892f, -0.028664915f, -0.02343589f, -0.017956194f, -0.012224451f, -0.006239538f, -6.457924e-07f, 0.0064929193f, 0.013241436f, 0.020244965f, 0.027503286f, 0.03501589f, 0.04278195f, 0.05080051f, 0.05907015f, 0.06758923f, 0.07635583f, 0.08536772f, 0.09462228f, 0.104116865f, 0.11384829f, 0.12381316f, 0.13400777f, 0.14442804f, 0.15506992f, 0.16592868f, 0.17699954f, 0.18827729f, 0.19975659f, 0.21143164f, 0.22329661f, 0.2353452f, 0.2475709f, 0.25996697f, 0.27252635f, 0.28524172f, 0.2981057f, 0.31111053f, 0.3242481f, 0.33751032f, 0.35088864f, 0.36437458f, 0.37795925f, 0.39163357f, 0.40538836f, 0.41921425f, 0.43310168f, 0.44704083f, 0.46102205f, 0.47503516f, 0.48907006f, 0.50311655f, 0.5171643f, 0.53120273f, 0.5452215f, 0.5592099f, 0.5731571f, 0.5870527f, 0.6008856f, 0.61464524f, 0.6283207f, 0.64190125f, 0.6553759f, 0.6687341f, 0.68196476f, 0.6950574f, 0.7080014f, 0.72078586f, 0.7334004f, 0.7458348f, 0.75807846f, 0.77012116f, 0.78195304f, 0.79356366f, 0.8049436f, 0.81608325f, 0.8269728f, 0.8376031f, 0.8479651f, 0.8580497f, 0.86784834f, 0.87735254f, 0.8865539f, 0.8954446f, 0.9040167f, 0.91226274f, 0.9201756f, 0.9277481f, 0.93497396f, 0.94184643f, 0.94835943f, 0.9545074f, 0.9602848f, 0.96568656f, 0.9707077f, 0.9753439f, 0.97959095f, 0.98344505f, 0.98690283f, 0.9899612f, 0.99261737f, 0.9948689f, 0.9967139f, 0.9981505f, 0.99917775f, 0.9997943f, 1.f, 0.9997945f, 0.99917793f, 0.9981508f, 0.9967143f, 0.99486953f, 0.99261814f, 0.9899621f, 0.9869039f, 0.9834463f, 0.97959226f, 0.9753453f, 0.97070926f, 0.9656882f, 0.9602866f, 0.9545093f, 0.9483615f, 0.94184846f, 0.93497616f, 0.92775065f, 0.9201781f, 0.91226536f, 0.9040194f, 0.89544743f, 0.8865568f, 0.8773556f, 0.86785144f, 0.85805297f, 0.8479684f, 0.8376065f, 0.8269763f, 0.81608677f, 0.8049474f, 0.7935675f, 0.78195673f, 0.77012515f, 0.75808245f, 0.7458389f, 0.7334046f, 0.72079f, 0.7080055f, 0.6950616f, 0.68196905f, 0.66873837f, 0.65538025f, 0.6419056f, 0.6283252f, 0.6146497f, 0.60089016f, 0.5870572f, 0.5731617f, 0.55921435f, 0.54522604f, 0.53120726f, 0.5171688f, 0.50312114f, 0.48907456f, 0.4750397f, 0.4610265f, 0.44704533f, 0.43310612f, 0.4192187f, 0.40539277f, 0.39163798f, 0.37796366f, 0.364379f, 0.35089302f, 0.33751458f, 0.32425234f, 0.31111467f, 0.29810995f, 0.28524593f, 0.27253038f, 0.25997093f, 0.24757482f, 0.23534909f, 0.2233005f, 0.21143548f, 0.1997603f, 0.18828094f, 0.17700309f, 0.16593227f, 0.1550734f, 0.1444315f, 0.13401105f, 0.123816356f, 0.11385143f, 0.10412f, 0.09462534f, 0.085370615f, 0.07635866f, 0.06759199f, 0.059072834f, 0.050803166f, 0.042784527f, 0.03501833f, 0.027505638f, 0.020247238f, 0.0132436305f, 0.0064950786f, 1.4317019e-06f, -0.0062375893f, -0.012222583f, -0.01795441f, -0.023434144f, -0.028663248f, -0.033643305f, -0.038376186f, -0.04286399f, -0.047109064f, -0.05111394f, -0.05488147f, -0.058414616f, -0.061716586f, -0.06479078f, -0.067640804f, -0.070270404f, -0.072683595f, -0.074884474f, -0.07687735f, -0.07866663f, -0.08025691f, -0.081652954f, -0.082859576f, -0.083881766f, -0.08472462f, -0.08539331f, -0.08589313f, -0.08622946f, -0.08640775f, -0.0864335f, -0.086312324f, -0.08604984f, -0.08565173f, -0.08512371f, -0.08447151f, -0.08370093f, -0.08281771f, -0.08182762f, -0.08073645f, -0.079549946f, -0.07827386f, -0.0769139f, -0.07547573f, -0.073965f, -0.07238727f, -0.07074808f, -0.06905291f, -0.06730711f, -0.06551602f, -0.06368486f, -0.061818782f, -0.05992284f, -0.05800197f, -0.05606104f, -0.054104757f, -0.052137766f, -0.050164554f, -0.048189525f, -0.046216883f, -0.044250764f, -0.04229515f, -0.040353894f, -0.038430687f, -0.036529094f, -0.034652527f, -0.032804254f, -0.030987376f, -0.029204866f, -0.027459523f, -0.02575403f, -0.024090823f, -0.022472277f, -0.02090057f, -0.019377723f, -0.01790561f, -0.016485943f, -0.015120279f, -0.013810017f, -0.0125564085f, -0.0113605475f, -0.010223394f, -0.009145712f, -0.008128161f, -0.0071712495f, -0.0062753367f, -0.0054406426f, -0.0046672495f, -0.003955107f, -0.0033040342f, -0.0027137194f, -0.0021837284f, -0.0017135134f, -0.001302387f, -0.0009495718f, -0.000654173f, -0.00041519097f, -0.00023152528f, -0.00010197882f, -2.526261e-05f, -2.451998e-12f,
};

// Для a = 3 с шагом 0.01 на отрезке [-3; 3]
const array<float, 601> Lanczos3Weights
{
	7.041864e-17f, 1.1183505e-05f, 4.5009754e-05f, 0.000101862424f, 0.00018208059f, 0.00028596242f, 0.00041375638f, 0.0005656692f, 0.0007418604f, 0.00094243453f, 0.0011674558f, 0.0014169306f, 0.0016908133f, 0.0019890156f, 0.0023113869f, 0.002657722f, 0.0030277735f, 0.0034212235f, 0.003837716f, 0.004276827f, 0.0047380743f, 0.0052209385f, 0.00572482f, 0.0062490874f, 0.006793038f, 0.0073559093f, 0.007936906f, 0.00853515f, 0.009149736f, 0.00977968f, 0.010423961f, 0.011081511f, 0.011751185f, 0.012431821f, 0.013122181f, 0.013820978f, 0.0145269055f, 0.015238586f, 0.015954593f, 0.016673492f, 0.017393762f, 0.018113887f, 0.018832281f, 0.019547317f, 0.020257378f, 0.020960761f, 0.02165578f, 0.02234069f, 0.023013724f, 0.023673119f, 0.024317045f, 0.024943704f, 0.025551256f, 0.026137829f, 0.026701592f, 0.02724065f, 0.02775316f, 0.02823723f, 0.028690984f, 0.029112574f, 0.029500106f, 0.02985177f, 0.030165704f, 0.030440075f, 0.030673109f, 0.030863019f, 0.03100803f, 0.031106446f, 0.031156553f, 0.031156724f, 0.03110531f, 0.03100074f, 0.030841501f, 0.030626087f, 0.03035309f, 0.030021122f, 0.029628854f, 0.029175049f, 0.028658492f, 0.028078075f, 0.027432749f, 0.02672149f, 0.025943419f, 0.025097696f, 0.02418358f, 0.02320041f, 0.022147594f, 0.021024657f, 0.019831201f, 0.018566918f, 0.01723161f, 0.015825167f, 0.014347612f, 0.012798993f, 0.011179533f, 0.009489547f, 0.007729447f, 0.005899768f, 0.004001146f, 0.002034334f, 1.9979032e-07f, -0.0021002744f, -0.0042659906f, -0.006495699f, -0.008788128f, -0.011141803f, -0.013555141f, -0.016026458f, -0.018553946f, -0.02113567f, -0.023769585f, -0.026453523f, -0.029185196f, -0.031962205f, -0.034781992f, -0.037641987f, -0.04053941f, -0.043471385f, -0.046434954f, -0.04942699f, -0.052444328f, -0.055483647f, -0.058541536f, -0.06161449f, -0.06469887f, -0.06779098f, -0.070886955f, -0.07398297f, -0.07707501f, -0.08015898f, -0.08323072f, -0.08628596f, -0.08932042f, -0.092329636f, -0.09530921f, -0.09825457f, -0.10116113f, -0.1040242f, -0.10683912f, -0.10960114f, -0.11230543f, -0.114947155f, -0.11752145f, -0.12002338f, -0.12244803f, -0.12479043f, -0.12704565f, -0.12920865f, -0.13127448f, -0.13323812f, -0.13509464f, -0.13683903f, -0.13846636f, -0.13997166f, -0.14135005f, -0.14259665f, -0.1437066f, -0.14467514f, -0.1454975f, -0.14616902f, -0.14668506f, -0.14704107f, -0.14723252f, -0.14725502f, -0.14710425f, -0.14677598f, -0.14626603f, -0.14557038f, -0.14468509f, -0.14360632f, -0.14233035f, -0.14085364f, -0.13917261f, -0.137284f, -0.13518466f, -0.13287143f, -0.13034147f, -0.12759197f, -0.12462035f, -0.121424176f, -0.11800118f, -0.114349194f, -0.1104663f, -0.10635076f, -0.102000944f, -0.097415484f, -0.092593215f, -0.08753301f, -0.0822341f, -0.07669584f, -0.07091779f, -0.06489979f, -0.058641706f, -0.052143764f, -0.045406353f, -0.038430076f, -0.031215737f, -0.023764426f, -0.016077263f, -0.008155762f, -1.5920425e-06f, 0.008383357f, 0.016996982f, 0.025836887f, 0.034900673f, 0.04418551f, 0.053688426f, 0.06340623f, 0.07333544f, 0.0834726f, 0.09381379f, 0.10435497f, 0.11509191f, 0.12602012f, 0.13713488f, 0.1484315f, 0.15990482f, 0.17154959f, 0.18336032f, 0.19533148f, 0.20745707f, 0.21973126f, 0.2321478f, 0.24470034f, 0.2573823f, 0.27018696f, 0.2831077f, 0.2961373f, 0.30926865f, 0.3224945f, 0.33580732f, 0.34919956f, 0.36266366f, 0.37619168f, 0.38977572f, 0.40340772f, 0.41707954f, 0.4307829f, 0.44450957f, 0.4582511f, 0.47199902f, 0.48574474f, 0.4994797f, 0.5131952f, 0.5268825f, 0.540533f, 0.5541378f, 0.56768805f, 0.5811751f, 0.59459007f, 0.6079239f, 0.6211681f, 0.63431364f, 0.6473519f, 0.6602741f, 0.6730714f, 0.6857353f, 0.69825715f, 0.7106283f, 0.7228404f, 0.73488504f, 0.74675375f, 0.7584385f, 0.769931f, 0.7812235f, 0.7923078f, 0.8031763f, 0.81382126f, 0.82423514f, 0.8344107f, 0.8443407f, 0.8540179f, 0.8634357f, 0.872587f, 0.8814655f, 0.89006484f, 0.89837873f, 0.9064011f, 0.91412646f, 0.921549f, 0.9286633f, 0.9354643f, 0.9419469f, 0.94810665f, 0.953939f, 0.9594394f, 0.9646043f, 0.96942943f, 0.9739116f, 0.97804743f, 0.98183393f, 0.98526824f, 0.9883479f, 0.99107045f, 0.9934343f, 0.9954373f, 0.9970781f, 0.99835575f, 0.99926895f, 0.99981713f, 1.f, 0.9998174f, 0.9992692f, 0.9983562f, 0.99707896f, 0.99543816f, 0.9934353f, 0.9910718f, 0.9883493f, 0.9852699f, 0.9818357f, 0.9780495f, 0.9739139f, 0.9694319f, 0.9646068f, 0.9594422f, 0.9539419f, 0.9481097f, 0.94195026f, 0.9354677f, 0.9286669f, 0.9215527f, 0.91413045f, 0.9064052f, 0.89838296f, 0.8900692f, 0.88147f, 0.87259173f, 0.8634404f, 0.8540229f, 0.8443457f, 0.8344159f, 0.8242406f, 0.8138267f, 0.80318177f, 0.7923134f, 0.78122926f, 0.769937f, 0.7584445f, 0.7467599f, 0.73489124f, 0.7228466f, 0.71063465f, 0.6982636f, 0.68574184f, 0.673078f, 0.66028076f, 0.64735866f, 0.63432044f, 0.62117493f, 0.6079307f, 0.5945968f, 0.58118194f, 0.567695f, 0.55414474f, 0.54054f, 0.52688956f, 0.5132023f, 0.49948677f, 0.48575184f, 0.47200608f, 0.45825815f, 0.4445166f, 0.43078995f, 0.4170865f, 0.40341467f, 0.38978264f, 0.37619868f, 0.3626706f, 0.3492065f, 0.33581415f, 0.32250124f, 0.30927533f, 0.29614404f, 0.28311437f, 0.2701936f, 0.2573888f, 0.24470674f, 0.23215424f, 0.21973762f, 0.20746334f, 0.1953376f, 0.1833664f, 0.17155553f, 0.15991077f, 0.14843737f, 0.13714066f, 0.1260257f, 0.1150974f, 0.10436038f, 0.093819164f, 0.08347788f, 0.07334062f, 0.06341123f, 0.05369331f, 0.044190355f, 0.034905404f, 0.025841508f, 0.017001418f, 0.008387679f, 2.612975e-06f, -0.008151614f, -0.016073236f, -0.023760518f, -0.03121201f, -0.038426466f, -0.045402866f, -0.052140348f, -0.05863841f, -0.06489662f, -0.0709148f, -0.07669296f, -0.08223129f, -0.08753033f, -0.09259067f, -0.0974131f, -0.10199868f, -0.10634859f, -0.11046423f, -0.11434726f, -0.117999345f, -0.121422485f, -0.12461879f, -0.12759052f, -0.1303401f, -0.1328702f, -0.13518351f, -0.137283f, -0.13917169f, -0.14085281f, -0.14232966f, -0.14360572f, -0.14468457f, -0.14556997f, -0.14626572f, -0.14677575f, -0.14710413f, -0.14725497f, -0.14723258f, -0.1470412f, -0.14668529f, -0.14616933f, -0.1454979f, -0.14467561f, -0.14370713f, -0.14259724f, -0.1413507f, -0.13997239f, -0.13846716f, -0.1368399f, -0.13509557f, -0.13323912f, -0.1312755f, -0.12920971f, -0.12704676f, -0.12479163f, -0.122449264f, -0.12002466f, -0.117522754f, -0.1149485f, -0.11230682f, -0.109602556f, -0.10684057f, -0.10402566f, -0.10116258f, -0.09825605f, -0.09531075f, -0.09233119f, -0.08932197f, -0.086287536f, -0.0832323f, -0.08016057f, -0.07707661f, -0.07398458f, -0.07088854f, -0.067792535f, -0.06470042f, -0.061616033f, -0.05854312f, -0.055485222f, -0.052445892f, -0.049428545f, -0.04643648f, -0.043472912f, -0.040540915f, -0.037643477f, -0.034783456f, -0.031963613f, -0.029186584f, -0.02645492f, -0.023770954f, -0.021137016f, -0.018555261f, -0.01602775f, -0.013556401f, -0.011143033f, -0.00878933f, -0.0064968644f, -0.004267092f, -0.0021013434f, -8.357772e-07f, 0.0020333317f, 0.0040001776f, 0.0058988347f, 0.0077285487f, 0.009488682f, 0.011178705f, 0.0127982f, 0.014346856f, 0.015824469f, 0.017230924f, 0.018566268f, 0.019830585f, 0.021024076f, 0.022147048f, 0.023199901f, 0.024183106f, 0.025097257f, 0.025943013f, 0.026721118f, 0.027432412f, 0.028077772f, 0.028658217f, 0.029174807f, 0.029628644f, 0.030020943f, 0.030352937f, 0.030625967f, 0.030841408f, 0.031000676f, 0.031105272f, 0.03115671f, 0.031156566f, 0.031106485f, 0.03100809f, 0.030863103f, 0.030673215f, 0.030440202f, 0.03016585f, 0.029851938f, 0.029500294f, 0.029112771f, 0.028691202f, 0.028237466f, 0.027753407f, 0.027240911f, 0.026701864f, 0.026138118f, 0.025551554f, 0.024944015f, 0.02431736f, 0.023673443f, 0.02301406f, 0.022341033f, 0.021656126f, 0.02096111f, 0.02025773f, 0.019547671f, 0.018832635f, 0.018114243f, 0.01739412f, 0.016673857f, 0.015954958f, 0.015238938f, 0.014527264f, 0.013821334f, 0.013122533f, 0.012432169f, 0.011751529f, 0.011081848f, 0.010424291f, 0.009780003f, 0.009150045f, 0.008535449f, 0.007937198f, 0.007356192f, 0.006793312f, 0.0062493514f, 0.005725073f, 0.005221182f, 0.004738307f, 0.0042770496f, 0.0038379275f, 0.0034214233f, 0.0030279676f, 0.0026579043f, 0.0023115566f, 0.0019891735f, 0.0016909586f, 0.0014170636f, 0.0011675763f, 0.0009425427f, 0.0007419562f, 0.00056575274f, 0.00041382745f, 0.00028601955f, 0.00018212596f, 0.00010189623f, 4.503209e-05f, 1.1194576e-05f, 2.6538992e-12f
};

template <int a>
void CalculateLanczosWeights(
	array<float, a * 2>& weights,
	float& weightSum,
	float imageX,
	int startIndex,
	int endIndex
) {
	for (size_t x = startIndex; x <= endIndex; x++)
	{
		float relativeX = imageX - x;
		float weight = 0;

		if constexpr (a == 2)
		{
			// Умножение на 100, так как функция LanczosKernel 
			// в массивах протабулирована с шагом 0.01
			weight = Lerp(
				Frac(relativeX),
				Lanczos2Weights[floor((relativeX + a) * 100)],
				Lanczos2Weights[ceil((relativeX + a) * 100)]
			);
		}
		else if constexpr (a == 3)
		{
			weight = Lerp(
				Frac(relativeX),
				Lanczos3Weights[floor((relativeX + a) * 100)],
				Lanczos3Weights[ceil((relativeX + a) * 100)]
			);
		}
		else
		{
			weight = LanczosKernel(relativeX, a);
		}

		weightSum += weight;
		weights[x - startIndex] = weight;
	}
}

template <int a = 3>
inline array<uint8_t, 3> LanczosInterpolation(
	PointF p1,
	const ImagePiece& image
) noexcept {
	array<uint8_t, 3> result{};
	array<float, a * 2> convolutedRows{};
	int startIndexX = floor(p1.x) - a + 1;
	int endIndexX = ceil(p1.x) + a - 1;
	int startIndexY = floor(p1.y) - a + 1;
	int endIndexY = ceil(p1.y) + a - 1;

	// Заранее вычисление весов ядра по X и их суммы
	// для нормировки 
	float weightSumX = 0;
	array<float, a * 2> weightsX{};
	CalculateLanczosWeights<a>(
		weightsX,
		weightSumX,
		p1.x,
		startIndexX,
		endIndexX
	);

	// То же самое по Y
	float weightSumY = 0;
	array<float, a * 2> weightsY{};
	CalculateLanczosWeights<a>(
		weightsY,
		weightSumY,
		p1.y,
		startIndexY,
		endIndexY
	);

	for (size_t colorOffset = 0; colorOffset < 3; colorOffset++)
	{
		// Свёртка по X
		for (size_t y = startIndexY; y <= endIndexY; y++)
		{
			for (size_t x = startIndexX; x <= endIndexX; x++)
			{
				convolutedRows[y - startIndexY] +=
					image(x, y, colorOffset) * weightsX[x - startIndexX];
			}
			convolutedRows[y - startIndexY] /= weightSumX;
		}

		// Свёртка по Y
		float convolutionResult = 0.f;
		for (size_t y = startIndexY; y <= endIndexY; y++)
		{
			convolutionResult +=
				convolutedRows[y - startIndexY] * weightsY[y - startIndexY];
		}

		result[colorOffset] = (uint8_t)std::clamp(
			convolutionResult / weightSumY + 1.f,
			0.f,
			255.f
		);

		std::fill(convolutedRows.begin(), convolutedRows.end(), 0.f);
	}

	return result;
}

inline array<uint8_t, 3> Lanczos2(
	PointF p1,
	const ImagePiece& image) noexcept
{
	PointF realP1(
		p1.x + image.GetExtendedPxLeftCount(),
		p1.y + image.GetExtendedPxUpCount()
	);

	return LanczosInterpolation<2>(realP1, image);
}

inline array<uint8_t, 3> Lanczos3(
	PointF p1,
	const ImagePiece& image) noexcept
{
	PointF realP1(
		p1.x + image.GetExtendedPxLeftCount(),
		p1.y + image.GetExtendedPxUpCount()
	);

	return LanczosInterpolation(realP1, image);
}